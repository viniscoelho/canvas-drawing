// Code generated by MockGen. DO NOT EDIT.
// Source: exercise/src/types (interfaces: CanvasDrawing)

// Package mocks is a generated GoMock package.
package mocks

import (
	common "canvas-drawing/src/types/common"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCanvasDrawing is a mock of CanvasDrawing interface.
type MockCanvasDrawing struct {
	ctrl     *gomock.Controller
	recorder *MockCanvasDrawingMockRecorder
}

// MockCanvasDrawingMockRecorder is the mock recorder for MockCanvasDrawing.
type MockCanvasDrawingMockRecorder struct {
	mock *MockCanvasDrawing
}

// NewMockCanvasDrawing creates a new mock instance.
func NewMockCanvasDrawing(ctrl *gomock.Controller) *MockCanvasDrawing {
	mock := &MockCanvasDrawing{ctrl: ctrl}
	mock.recorder = &MockCanvasDrawingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCanvasDrawing) EXPECT() *MockCanvasDrawingMockRecorder {
	return m.recorder
}

// FillCanvas mocks base method.
func (m *MockCanvasDrawing) FillCanvas(arg0 common.Rectangle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillCanvas", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FillCanvas indicates an expected call of FillCanvas.
func (mr *MockCanvasDrawingMockRecorder) FillCanvas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillCanvas", reflect.TypeOf((*MockCanvasDrawing)(nil).FillCanvas), arg0)
}

// GetCanvas mocks base method.
func (m *MockCanvasDrawing) GetCanvas() common.CanvasString {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanvas")
	ret0, _ := ret[0].(common.CanvasString)
	return ret0
}

// GetCanvas indicates an expected call of GetCanvas.
func (mr *MockCanvasDrawingMockRecorder) GetCanvas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanvas", reflect.TypeOf((*MockCanvasDrawing)(nil).GetCanvas))
}
